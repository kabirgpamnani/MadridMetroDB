-- MySQL Script generated by MySQL Workbench
-- Wed May 15 15:47:10 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema MadridMetro
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema MadridMetro
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `MadridMetro` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `MadridMetro` ;

-- -----------------------------------------------------
-- Table `MadridMetro`.`AgeGroup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MadridMetro`.`AgeGroup` (
  `AgeGroupName` VARCHAR(20) NOT NULL,
  `PriceA` DECIMAL(10,2) NULL DEFAULT NULL,
  `PriceB1` DECIMAL(10,2) NULL DEFAULT NULL,
  `PriceB2` DECIMAL(10,2) NULL DEFAULT NULL,
  `PriceB3` DECIMAL(10,2) NULL DEFAULT NULL,
  `PriceC1` DECIMAL(10,2) NULL DEFAULT NULL,
  `PriceC2` DECIMAL(10,2) NULL DEFAULT NULL,
  `PriceE1` DECIMAL(10,2) NULL DEFAULT NULL,
  `PriceE2` DECIMAL(10,2) NULL DEFAULT NULL,
  PRIMARY KEY (`AgeGroupName`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `MadridMetro`.`Card`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MadridMetro`.`Card` (
  `CardNumber` INT NOT NULL,
  `ClientID` INT NULL DEFAULT NULL,
  `CardType` VARCHAR(50) NULL DEFAULT NULL,
  `ActiveStatus` TINYINT(1) NULL DEFAULT NULL,
  `Balance` DECIMAL(10,2) NULL DEFAULT NULL,
  `IssueDate` DATE NULL DEFAULT NULL,
  `LastRechargeDate` DATE NULL DEFAULT NULL,
  `RechargePrice` DECIMAL(10,2) NULL DEFAULT NULL,
  PRIMARY KEY (`CardNumber`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `MadridMetro`.`Zone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MadridMetro`.`Zone` (
  `City` VARCHAR(50) NOT NULL,
  `ZoneCode` VARCHAR(10) NULL DEFAULT NULL,
  PRIMARY KEY (`City`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `MadridMetro`.`Discounts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MadridMetro`.`Discounts` (
  `DiscountType` VARCHAR(50) NOT NULL,
  `DiscountAmount` DECIMAL(10,2) NULL DEFAULT NULL,
  PRIMARY KEY (`DiscountType`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `MadridMetro`.`Client`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MadridMetro`.`Client` (
  `ClientID` INT NOT NULL,
  `FirstName` VARCHAR(100) NULL DEFAULT NULL,
  `LastName` VARCHAR(100) NULL DEFAULT NULL,
  `Email` VARCHAR(100) NULL DEFAULT NULL,
  `PhoneNumber` VARCHAR(20) NULL DEFAULT NULL,
  `City` VARCHAR(20) NULL DEFAULT NULL,
  `Postcode` INT NULL DEFAULT NULL,
  `StreetAddress` VARCHAR(30) NULL DEFAULT NULL,
  `DOB` DATE NULL DEFAULT NULL,
  `StudentState` TINYINT(1) NULL DEFAULT NULL,
  `DiscountType` VARCHAR(50) NULL DEFAULT NULL,
  `ClientAgeGroup` VARCHAR(30) NULL DEFAULT NULL,
  PRIMARY KEY (`ClientID`),
  INDEX `fk_clients_city` (`City` ASC) VISIBLE,
  INDEX `fk_Discounts_DiscountType` (`DiscountType` ASC) VISIBLE,
  CONSTRAINT `fk_clients_city`
    FOREIGN KEY (`City`)
    REFERENCES `MadridMetro`.`Zone` (`City`),
  CONSTRAINT `fk_Discounts_DiscountType`
    FOREIGN KEY (`DiscountType`)
    REFERENCES `MadridMetro`.`Discounts` (`DiscountType`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `MadridMetro`.`Transaction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MadridMetro`.`Transaction` (
  `TransactionID` INT NOT NULL AUTO_INCREMENT,
  `CardNumber` INT NULL DEFAULT NULL,
  `TransactionType` VARCHAR(50) NULL DEFAULT NULL,
  `Amount` DECIMAL(10,2) NULL DEFAULT NULL,
  `TransactionDate` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`TransactionID`),
  INDEX `CardNumber` (`CardNumber` ASC) VISIBLE,
  CONSTRAINT `transaction_ibfk_1`
    FOREIGN KEY (`CardNumber`)
    REFERENCES `MadridMetro`.`Card` (`CardNumber`))
ENGINE = InnoDB
AUTO_INCREMENT = 17
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `MadridMetro` ;

-- -----------------------------------------------------
-- procedure CalculateAndStoreMonthlyCardPrice
-- -----------------------------------------------------

DELIMITER $$
USE `MadridMetro`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CalculateAndStoreMonthlyCardPrice`(IN ClientId INT)
BEGIN
    DECLARE basePrice DECIMAL(10,2);
    DECLARE finalPrice DECIMAL(10,2);
    DECLARE discountRate DECIMAL(10,2);
    DECLARE zoneCode VARCHAR(10);

    -- Determine the client's zone based on their city
    SELECT ZoneCode INTO zoneCode
    FROM MadridMetro.Zone
    WHERE City = (SELECT City FROM MadridMetro.Client WHERE ClientID = ClientId LIMIT 1);

    -- Determine the base price from the AgeGroup and Zone tables
    SELECT CASE
        WHEN zoneCode = 'A' THEN PriceA
        WHEN zoneCode = 'B1' THEN PriceB1
        WHEN zoneCode = 'B2' THEN PriceB2
        WHEN zoneCode = 'B3' THEN PriceB3
        WHEN zoneCode = 'C1' THEN PriceC1
        WHEN zoneCode = 'C2' THEN PriceC2
        ELSE NULL
    END INTO basePrice
    FROM MadridMetro.AgeGroup
    WHERE AgeGroupName = (SELECT ClientAgeGroup FROM MadridMetro.Client WHERE ClientID = ClientId LIMIT 1);


    -- Get the discount rate; if no discount, then the rate is 0 (meaning no discount)
    SELECT COALESCE(DiscountAmount, 0) INTO discountRate
    FROM MadridMetro.Discounts
    WHERE DiscountType = (SELECT DiscountType FROM MadridMetro.Client WHERE ClientID = ClientId LIMIT 1);

    -- Calculate the final price
    SET finalPrice = basePrice * (1 - discountRate);

    -- Insert the transaction showing the purchase of the monthly metro card
    INSERT INTO MadridMetro.Transaction (CardNumber, TransactionType, Amount, TransactionDate)
    VALUES (
        (SELECT CardNumber FROM MadridMetro.Card WHERE ClientID = ClientId),
        'Recharge',
        finalPrice,
        CURDATE()
    );
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateCardStatusIfExpired
-- -----------------------------------------------------

DELIMITER $$
USE `MadridMetro`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateCardStatusIfExpired`()
BEGIN
    UPDATE MadridMetro.Card
    SET ActiveStatus = 0
    WHERE LastRechargeDate <= CURDATE() - INTERVAL 30 DAY;
END$$

DELIMITER ;
USE `MadridMetro`;

DELIMITER $$
USE `MadridMetro`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `MadridMetro`.`CalculateRechargePrice`
BEFORE INSERT ON `MadridMetro`.`Card`
FOR EACH ROW
BEGIN
    DECLARE zoneCode VARCHAR(20);
    DECLARE basePrice DECIMAL(10,2);
    DECLARE discountRate DECIMAL(10,2);
    DECLARE finalPrice DECIMAL(10,2);

    -- Retrieve the client's city and determine the zone code
    SELECT z.ZoneCode INTO zoneCode
    FROM MadridMetro.Zone z
    JOIN MadridMetro.Client c ON z.City = c.City
    WHERE c.ClientID = NEW.ClientID;

    -- Retrieve the client's age group and determine the base price
    SELECT CASE
        WHEN zoneCode = 'A' THEN ag.PriceA
        WHEN zoneCode = 'B1' THEN ag.PriceB1
        WHEN zoneCode = 'B2' THEN ag.PriceB2
        WHEN zoneCode = 'B3' THEN ag.PriceB3
        WHEN zoneCode = 'C1' THEN ag.PriceC1
        WHEN zoneCode = 'C2' THEN ag.PriceC2
        ELSE NULL
    END INTO basePrice
    FROM MadridMetro.AgeGroup ag
    JOIN MadridMetro.Client c ON ag.AgeGroupName = c.ClientAgeGroup
    WHERE c.ClientID = NEW.ClientID;

    -- Get the discount rate; if no discount type is set, assume 0
    SELECT COALESCE(d.DiscountAmount, 0) INTO discountRate
    FROM MadridMetro.Discounts d
    WHERE d.DiscountType = (SELECT c.DiscountType FROM MadridMetro.Client c WHERE c.ClientID = NEW.ClientID);

    -- Calculate the final recharge price
    SET finalPrice = basePrice * (1 - discountRate);

    -- Set the RechargePrice in the new card record
    SET NEW.RechargePrice = finalPrice;
END$$

USE `MadridMetro`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `MadridMetro`.`UpdateActiveStatusAfterBalanceChange`
AFTER UPDATE ON `MadridMetro`.`Card`
FOR EACH ROW
BEGIN
    -- Check if the balance is not NULL, is an integer, and has fallen below 1.7
    IF NEW.Balance IS NOT NULL AND NEW.Balance < 1.7 AND NEW.Balance = FLOOR(NEW.Balance) THEN
        -- Update the ActiveStatus to 0
        UPDATE MadridMetro.Card
        SET ActiveStatus = 0
        WHERE CardNumber = NEW.CardNumber;
    END IF;
END$$

USE `MadridMetro`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `MadridMetro`.`MadridMetroUpdateClientAgeGroupOnUpdate`
BEFORE UPDATE ON `MadridMetro`.`Client`
FOR EACH ROW
BEGIN
    SET NEW.ClientAgeGroup = CASE
        WHEN TIMESTAMPDIFF(YEAR, NEW.DOB, CURDATE()) < 26 OR NEW.StudentState = TRUE THEN 'Abono Joven'
        WHEN TIMESTAMPDIFF(YEAR, NEW.DOB, CURDATE()) >= 26 AND TIMESTAMPDIFF(YEAR, NEW.DOB, CURDATE()) < 65 THEN 'Normal'
        ELSE 'Senior'
    END;
END$$

USE `MadridMetro`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `MadridMetro`.`UpdateCardPriceAfterClientUpdate`
AFTER UPDATE ON `MadridMetro`.`Client`
FOR EACH ROW
BEGIN
    -- Declare variables to hold dynamic data for price calculation
    DECLARE newZoneCode VARCHAR(20);
    DECLARE newBasePrice DECIMAL(10,2);
    DECLARE newDiscountRate DECIMAL(10,2);
    DECLARE newFinalPrice DECIMAL(10,2);
    DECLARE done INT DEFAULT FALSE; -- Handler flag
    DECLARE card_number INT; -- To hold CardNumber in loop
    
    -- Cursor to iterate through each card that the client owns
    DECLARE card_cursor CURSOR FOR 
        SELECT CardNumber FROM MadridMetro.Card WHERE ClientID = NEW.ClientID;
    
    -- Handler for the end of the cursor loop
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Check if the relevant columns are updated
    IF OLD.City <> NEW.City OR OLD.ClientAgeGroup <> NEW.ClientAgeGroup OR OLD.DiscountType <> NEW.DiscountType THEN

        -- Determine the new ZoneCode based on the updated city
        SELECT ZoneCode INTO newZoneCode
        FROM MadridMetro.Zone
        WHERE City = NEW.City;

        -- Get the current discount rate from the Discounts table
        SELECT COALESCE(DiscountAmount, 0) INTO newDiscountRate
        FROM MadridMetro.Discounts
        WHERE DiscountType = NEW.DiscountType;

        -- Open the cursor to process each card
        OPEN card_cursor;

        card_loop: LOOP
            FETCH card_cursor INTO card_number;
            IF done THEN
                LEAVE card_loop;
            END IF;

            -- Calculate the base price for each card using the potentially new zone and age group
            SELECT CASE
                WHEN newZoneCode = 'A' THEN ag.PriceA
                WHEN newZoneCode = 'B1' THEN ag.PriceB1
                WHEN newZoneCode = 'B2' THEN ag.PriceB2
                WHEN newZoneCode = 'B3' THEN ag.PriceB3
                WHEN newZoneCode = 'C1' THEN ag.PriceC1
                WHEN newZoneCode = 'C2' THEN ag.PriceC2
                ELSE NULL
            END INTO newBasePrice
            FROM MadridMetro.AgeGroup ag
            WHERE ag.AgeGroupName = NEW.ClientAgeGroup;

            -- Calculate the final price considering the base price and the discount rate
            SET newFinalPrice = newBasePrice * (1 - newDiscountRate );

            -- Update the RechargePrice for the card
            UPDATE MadridMetro.Card
            SET RechargePrice = newFinalPrice
            WHERE CardNumber = card_number;

        END LOOP;

        CLOSE card_cursor;
    END IF;
END$$

USE `MadridMetro`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `MadridMetro`.`UpdateClientAgeGroup`
BEFORE INSERT ON `MadridMetro`.`Client`
FOR EACH ROW
BEGIN
    SET NEW.ClientAgeGroup = CASE
        WHEN TIMESTAMPDIFF(YEAR, NEW.DOB, CURDATE()) < 26 OR NEW.StudentState = TRUE THEN 'Abono Joven'
        WHEN TIMESTAMPDIFF(YEAR, NEW.DOB, CURDATE()) >= 26 AND TIMESTAMPDIFF(YEAR, NEW.DOB, CURDATE()) < 65 THEN 'Normal'
        ELSE 'Senior'
    END;
END$$

USE `MadridMetro`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `MadridMetro`.`AfterTransactionInsert`
AFTER INSERT ON `MadridMetro`.`Transaction`
FOR EACH ROW
BEGIN
    -- Declare variables at the beginning of the trigger
    DECLARE rechargePrice DECIMAL(10, 2);

    -- Check if the transaction is a 'Recharge Monthly'
    IF NEW.TransactionType = 'Recharge Monthly' THEN
        
        -- Retrieve the RechargePrice for the card involved in the transaction
        SELECT RechargePrice INTO rechargePrice
        FROM MadridMetro.Card
        WHERE CardNumber = NEW.CardNumber;

        -- Check if the amount is sufficient to recharge the card
        IF NEW.Amount >= rechargePrice THEN
            -- Update the card's ActiveStatus and LastRechargeDate
            UPDATE MadridMetro.Card
            SET ActiveStatus = true,
                LastRechargeDate = NEW.TransactionDate
            WHERE CardNumber = NEW.CardNumber;
        END IF;
    END IF;
END$$

USE `MadridMetro`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `MadridMetro`.`AfterTransactionInsertForSingleFare`
AFTER INSERT ON `MadridMetro`.`Transaction`
FOR EACH ROW
BEGIN
	-- Declare a variable to hold the current balance of the card
	DECLARE currentBalance DECIMAL(10, 2);
    -- Check if the transaction is 'Single-fare'
    IF NEW.TransactionType = 'Single-fare' THEN
        
        
        -- Retrieve the current balance for the card involved in the transaction
        SELECT Balance INTO currentBalance
        FROM MadridMetro.Card
        WHERE CardNumber = NEW.CardNumber;

        -- Check if the current balance is sufficient
        IF currentBalance >= 1.7 THEN
            -- Reduce the balance by 1.7
            UPDATE MadridMetro.Card
            SET Balance = currentBalance - 1.7
            WHERE CardNumber = NEW.CardNumber;
        END IF;
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
